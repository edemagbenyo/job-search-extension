import { PluginHooks } from 'rollup';
import { ChromeExtensionManifest } from '../manifest';
import { DynamicImportWrapperOptions } from './dynamicImportWrapper';
export declare function dedupe<T>(x: T[]): T[];
export interface ManifestInputPluginCache {
    assets: string[];
    input: string[];
    inputAry: string[];
    inputObj: Record<string, string>;
    permsHash: string;
    srcDir: string | null;
    /** for memoized fs.readFile */
    readFile: Map<string, any>;
    manifest?: ChromeExtensionManifest;
    assetChanged: boolean;
}
export declare type ManifestInputPlugin = Pick<PluginHooks, 'options' | 'buildStart' | 'watchChange' | 'generateBundle'> & {
    name: string;
    srcDir: string | null;
};
export declare const explorer: {
    readonly search: (searchFrom?: string | undefined) => import("cosmiconfig/dist/types").CosmiconfigResult;
    readonly load: (filepath: string) => import("cosmiconfig/dist/types").CosmiconfigResult;
    readonly clearLoadCache: () => void;
    readonly clearSearchCache: () => void;
    readonly clearCaches: () => void;
};
export declare function manifestInput({ dynamicImportWrapper, pkg, publicKey, verbose, cache, }?: {
    dynamicImportWrapper?: false | DynamicImportWrapperOptions | undefined;
    pkg?: {
        description: string;
        name: string;
        version: string;
    } | undefined;
    publicKey?: string | undefined;
    verbose?: boolean | undefined;
    cache?: ManifestInputPluginCache | undefined;
}): ManifestInputPlugin;
export default manifestInput;
